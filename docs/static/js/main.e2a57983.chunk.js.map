{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","class","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,8BACI,sBAAMC,SAZO,SAACC,GAGlBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,YAAY,SACZC,MAAQV,EACRW,SAtBU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,e,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCF,EADnC,+DAEAG,MAAOD,GAFP,cAEbE,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QATtB,kBAaZK,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IACtC,OACI,sBAAKa,UAAU,8BAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZf,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACnB,IAEGoB,EDbiBK,CAAczB,GAA/BM,EAF8B,EAE9BA,KAAMa,EAFwB,EAExBA,QAEb,OACI,qCACA,6BAAMnB,IACJmB,GAAW,oBAAIO,MAAM,mCAAV,yBACb,qBAAKX,UAAU,kCAAf,SAEYT,EAAKE,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEYtBiB,G,MAvBM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,cAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ4C,EAAWpB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CACIA,SAAWA,GACLA,aCflC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e2a57983.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    // Aqui obtengo el evento\n    const handleSubmit = (e) => {\n        // El comportamiento del formulario por defecto recarga la pagina\n        // Con esta instruccion evitamos esto\n        e.preventDefault();\n        if ( inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit={ handleSubmit }>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    value={ inputValue }\n                    onChange={ handleInputChange }\n                />\n            </form>\n        </div>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&api_key=cf8VpVujcMIlJDKCNHNgGTSgmBd66oa5&limit=10`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n\n","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n    return (\n        <div className=\"card animate__fadeInDownBig\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data, loading} = useFetchGifs( category );\n\n    return (\n        <>\n        <h3>{ category }</h3>\n        { loading && <h1 class=\"animate__animated animate__flash\">Loading....</h1> }\n        <div className=\"card-grid animate__jackInTheBox\">\n                {\n                    data.map( (img) => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","// Todos los hooks tienen un nombre que empiezapor 'use'\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category])\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nimport './index.css';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One punch',]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            category={ category }\n                            key={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}